<?php

namespace DoctrineProxies\__CG__\models;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Taxon extends \models\Taxon implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setAcceptedName($acceptedName)
    {
        $this->__load();
        return parent::setAcceptedName($acceptedName);
    }

    public function getAcceptedName()
    {
        $this->__load();
        return parent::getAcceptedName();
    }

    public function setEndemic($endemic)
    {
        $this->__load();
        return parent::setEndemic($endemic);
    }

    public function getEndemic()
    {
        $this->__load();
        return parent::getEndemic();
    }

    public function setAuthorInitials($authorInitials)
    {
        $this->__load();
        return parent::setAuthorInitials($authorInitials);
    }

    public function getAuthorInitials()
    {
        $this->__load();
        return parent::getAuthorInitials();
    }

    public function setSynonimClasification($synonimClasification)
    {
        $this->__load();
        return parent::setSynonimClasification($synonimClasification);
    }

    public function getSynonimClasification()
    {
        $this->__load();
        return parent::getSynonimClasification();
    }

    public function setCreationDate($creationDate)
    {
        $this->__load();
        return parent::setCreationDate($creationDate);
    }

    public function getCreationDate()
    {
        $this->__load();
        return parent::getCreationDate();
    }

    public function setModificationDate($modificationDate)
    {
        $this->__load();
        return parent::setModificationDate($modificationDate);
    }

    public function getModificationDate()
    {
        $this->__load();
        return parent::getModificationDate();
    }

    public function setComments($comments)
    {
        $this->__load();
        return parent::setComments($comments);
    }

    public function getComments()
    {
        $this->__load();
        return parent::getComments();
    }

    public function setModificationComments($modificationComments)
    {
        $this->__load();
        return parent::setModificationComments($modificationComments);
    }

    public function getModificationComments()
    {
        $this->__load();
        return parent::getModificationComments();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function addTaxon(\models\Taxon $childrenRank)
    {
        $this->__load();
        return parent::addTaxon($childrenRank);
    }

    public function getChildrenRank()
    {
        $this->__load();
        return parent::getChildrenRank();
    }

    public function getChildrenSynonyms()
    {
        $this->__load();
        return parent::getChildrenSynonyms();
    }

    public function setRank(\models\Rank $rank = NULL)
    {
        $this->__load();
        return parent::setRank($rank);
    }

    public function getRank()
    {
        $this->__load();
        return parent::getRank();
    }

    public function setParentRank(\models\Taxon $parentRank = NULL)
    {
        $this->__load();
        return parent::setParentRank($parentRank);
    }

    public function getParentRank()
    {
        $this->__load();
        return parent::getParentRank();
    }

    public function setParentSynonyms(\models\Taxon $parentSynonyms = NULL)
    {
        $this->__load();
        return parent::setParentSynonyms($parentSynonyms);
    }

    public function getParentSynonyms()
    {
        $this->__load();
        return parent::getParentSynonyms();
    }

    public function addAutor(\models\Autor $authors)
    {
        $this->__load();
        return parent::addAutor($authors);
    }

    public function getAuthors()
    {
        $this->__load();
        return parent::getAuthors();
    }

    public function addPublicacion(\models\Publicacion $publications)
    {
        $this->__load();
        return parent::addPublicacion($publications);
    }

    public function getPublications()
    {
        $this->__load();
        return parent::getPublications();
    }

    public function addSustrato(\models\Sustrato $sustratos)
    {
        $this->__load();
        return parent::addSustrato($sustratos);
    }

    public function getSustratos()
    {
        $this->__load();
        return parent::getSustratos();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'name', 'acceptedName', 'endemic', 'authorInitials', 'synonimClasification', 'creationDate', 'modificationDate', 'comments', 'modificationComments', 'status', 'id', 'children_rank', 'children_synonyms', 'rank', 'parent_rank', 'parent_synonyms', 'authors', 'publications', 'sustratos');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}