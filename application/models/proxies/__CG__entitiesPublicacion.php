<?php

namespace DoctrineProxies\__CG__\entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Publicacion extends \entities\Publicacion implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setAuthor($author)
    {
        $this->__load();
        return parent::setAuthor($author);
    }

    public function getAuthor()
    {
        $this->__load();
        return parent::getAuthor();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setYear($year)
    {
        $this->__load();
        return parent::setYear($year);
    }

    public function getYear()
    {
        $this->__load();
        return parent::getYear();
    }

    public function setJournal($journal)
    {
        $this->__load();
        return parent::setJournal($journal);
    }

    public function getJournal()
    {
        $this->__load();
        return parent::getJournal();
    }

    public function setCollation($collation)
    {
        $this->__load();
        return parent::setCollation($collation);
    }

    public function getCollation()
    {
        $this->__load();
        return parent::getCollation();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setQuote($quote)
    {
        $this->__load();
        return parent::setQuote($quote);
    }

    public function getQuote()
    {
        $this->__load();
        return parent::getQuote();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function addLocalidad(\entities\Localidad $localidades)
    {
        $this->__load();
        return parent::addLocalidad($localidades);
    }

    public function getLocalidades()
    {
        $this->__load();
        return parent::getLocalidades();
    }

    public function addListaRoja(\entities\ListaRoja $listasRojas)
    {
        $this->__load();
        return parent::addListaRoja($listasRojas);
    }

    public function getListasRojas()
    {
        $this->__load();
        return parent::getListasRojas();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'author', 'title', 'year', 'journal', 'collation', 'type', 'quote', 'id', 'localidades', 'listas_rojas');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}